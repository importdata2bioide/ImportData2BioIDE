1.
	1.1 错误信息：
	Deadlock found when trying to get lock; try restarting transaction
	HHH000346: Error during managed flush [org.hibernate.exception.LockAcquisitionException: could not execute statement]
	Unexpected exception occurred invoking async method: public void org.big.service.PlantAsyncServiceImpl.insertListExcel(org.big.entityVO.BaseParamsForm,java.util.List,java.util.Map) throws java.lang.Exception
	org.springframework.dao.CannotAcquireLockException: could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.LockAcquisitionException: could not execute statement
	1.2 问题产生原因：
	事务嵌套/@Async 和 @Transactional 同时使用在同一个方法上
	1.3 解决思路：
	@Async 和 @Transactional 同时使用失效
	https://blog.csdn.net/qq_31212871/article/details/82901051
	https://www.jianshu.com/p/36950fd704e0
	那该如何给@Async操作添加事务管理呢？可以将需要事务管理操作的方法放置到异步方法"内部"，在内部被调用的方法上添加@Transactional.
	方法A:使用了@Async/@Transactional来标注，但是无法产生事务控制的目的。
	方法B:使用了@Async来标注，  B中调用了C、D，C/D分别使用@Transactional做了标注，则可实现事务控制的目的。
	
2.
	2.1 错误信息：
	java.io.IOException: GC overhead limit exceeded
		at org.apache.poi.ss.usermodel.WorkbookFactory.createWorkbook(WorkbookFactory.java:326)
		at org.apache.poi.ss.usermodel.WorkbookFactory.createXSSFWorkbook(WorkbookFactory.java:296)
	2.2 问题产生原因：
	加载了太多资源到内存，jvm一直在进行GC，但是回收到内存太小，无法满足程序所需，所以OOM了
	或者可以解析为：执行垃圾收集的时间过多，执行有效运算的时间太少，默认来说，GC的时间大于98%，回收内存的大小小于2%，就会抛出这个异常。
	2.2.1 OOM：out of memory 
		     为什么会发生OOM ? 第一种情况：分配的太少了，jvm默认大小太小；第二种情况：应用程序使用完之后没有释放，程序再申请内存时没有内存可以分配了。
	2.2.2 内存溢出：程序申请的内存超过了jvm能提供的内存大小，就成为溢出了。
	2.2.3 内存泄漏：应用程序使用完之后没有释放，别人又无法使用，内存就泄露了。
	2.2.4 eclipse内存使用情况分析工具 https://www.eclipse.org/mat/	  
	2.3 解决思路：
		如果想从根本上解决问题, 则需要排查内存分配相关的代码. 简单来说, 需要回答以下问题:
			a.哪类对象占用了最多内存？
			b.这些对象是在哪部分代码中分配的。
		要搞清这一点, 可能需要好几天时间。下面是大致的流程:
			a.获得在生产服务器上执行堆转储(heap dump)的权限。“转储”(Dump)是堆内存的快照, 可用于后续的内存分析. 这些快照中可能含有机密信息, 例如密码、信用卡账号等, 所以有时候, 由于企业的安全限制, 要获得生产环境的堆转储并不容易。
			b.在适当的时间执行堆转储。一般来说,内存分析需要比对多个堆转储文件, 假如获取的时机不对, 那就可能是一个“废”的快照. 另外, 每执行一次堆转储, 就会对JVM进行一次“冻结”, 所以生产环境中,不能执行太多的Dump操作,否则系统缓慢或者卡死,你的麻烦就大了。
			c. 用另一台机器来加载Dump文件。如果出问题的JVM内存是8GB, 那么分析 Heap Dump 的机器内存一般需要大于 8GB. 然后打开转储分析软件(我们推荐Eclipse MAT , 当然你也可以使用其他工具)。
			d.检测快照中占用内存最大的 GC roots。详情请参考: Solving OutOfMemoryError (part 6) – Dump is not a waste。 这对新手来说可能有点困难, 但这也会加深你对堆内存结构以及 navigation 机制的理解。
			e.接下来, 找出可能会分配大量对象的代码. 如果对整个系统非常熟悉, 可能很快就能定位问题。运气不好的话，就只有加班加点来进行排查了。
		
		
	
	
	
	
	
	
	
	
	